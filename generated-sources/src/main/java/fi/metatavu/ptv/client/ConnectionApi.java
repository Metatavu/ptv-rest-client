/*
 * PTV Open Api version 9
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.ptv.client;

import fi.metatavu.ptv.client.model.*;

import fi.metatavu.ptv.client.model.IVmError;
import fi.metatavu.ptv.client.model.V9VmOpenApiChannelServicesIn;
import fi.metatavu.ptv.client.model.V9VmOpenApiService;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceAndChannelIn;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceAndChannelRelationAstiInBase;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceAndChannelRelationBySource;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceAndChannelRelationBySourceAsti;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceAndChannelRelationBySourceInBase;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceAndChannelRelationInBase;
import fi.metatavu.ptv.client.model.V9VmOpenApiServiceChannels;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-05T18:15:03.681+03:00")
public class ConnectionApi {
  
  private ApiClient client;
  private String accessToken;

  public ConnectionApi(ApiClient client, String accessToken) {
    this.client = client;
    this.accessToken = accessToken;
  }
  
  /**
   * Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set &#39;deleteAllServiceRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param serviceChannelId Service channel identifier (required)
   * @param request A list of service channels. (optional)
   */
  public ApiResponse<V9VmOpenApiServiceChannels> apiV9ConnectionASTIServiceChannelIdByServiceChannelIdPut(String serviceChannelId, V9VmOpenApiChannelServicesIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection/ASTI/serviceChannelId/{serviceChannelId}"
      .replaceAll("\\{" + "serviceChannelId" + "\\}", serviceChannelId);
      
    ResultType<V9VmOpenApiServiceChannels> resultType = new ResultType<V9VmOpenApiServiceChannels>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates connections between a service and service channels with extra data.   Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param serviceId Service identifier (required)
   * @param request A list of service channels. (optional)
   */
  public ApiResponse<V9VmOpenApiService> apiV9ConnectionASTIServiceIdByServiceIdPut(String serviceId, V9VmOpenApiServiceAndChannelRelationAstiInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection/ASTI/serviceId/{serviceId}"
      .replaceAll("\\{" + "serviceId" + "\\}", serviceId);
      
    ResultType<V9VmOpenApiService> resultType = new ResultType<V9VmOpenApiService>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param serviceSourceId External source identifier for service (required)
   * @param request A list of service channels. (optional)
   */
  public ApiResponse<V9VmOpenApiService> apiV9ConnectionASTIServiceSourceIdByServiceSourceIdPut(String serviceSourceId, V9VmOpenApiServiceAndChannelRelationBySourceAsti request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection/ASTI/serviceSourceId/{serviceSourceId}"
      .replaceAll("\\{" + "serviceSourceId" + "\\}", serviceSourceId);
      
    ResultType<V9VmOpenApiService> resultType = new ResultType<V9VmOpenApiService>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a connections between services and service channels with extra data.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param request A list of services and service channels. (optional)
   */
  public ApiResponse<List<String>> apiV9ConnectionPost(List<V9VmOpenApiServiceAndChannelIn> request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection";
      
    ResultType<List<String>> resultType = new ResultType<List<String>>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates connections between a service and service channels with extra data.   Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param serviceId Service identifier (required)
   * @param request A list of service channels. (optional)
   */
  public ApiResponse<V9VmOpenApiService> apiV9ConnectionServiceIdByServiceIdPut(String serviceId, V9VmOpenApiServiceAndChannelRelationInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection/serviceId/{serviceId}"
      .replaceAll("\\{" + "serviceId" + "\\}", serviceId);
      
    ResultType<V9VmOpenApiService> resultType = new ResultType<V9VmOpenApiService>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  ASTI connections are not removed - data for those connections can be updated though.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param serviceSourceId External source identifier for service (required)
   * @param request A list of service channels. (optional)
   */
  public ApiResponse<V9VmOpenApiService> apiV9ConnectionServiceSourceIdByServiceSourceIdPut(String serviceSourceId, V9VmOpenApiServiceAndChannelRelationBySourceInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection/serviceSourceId/{serviceSourceId}"
      .replaceAll("\\{" + "serviceSourceId" + "\\}", serviceSourceId);
      
    ResultType<V9VmOpenApiService> resultType = new ResultType<V9VmOpenApiService>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a connections between services and service channels with extra data. External source ids are used.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param request A list of services and service channels. (optional)
   */
  public ApiResponse<List<String>> apiV9ConnectionSourcePost(List<V9VmOpenApiServiceAndChannelRelationBySource> request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v9/Connection/Source";
      
    ResultType<List<String>> resultType = new ResultType<List<String>>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
}
