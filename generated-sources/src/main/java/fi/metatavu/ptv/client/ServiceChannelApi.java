/**
 * PTV Open Api
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fi.metatavu.ptv.client;

import fi.metatavu.ptv.client.model.*;

import fi.metatavu.ptv.client.model.IVmError;
import fi.metatavu.ptv.client.model.VmOpenApiServiceChannels;
import fi.metatavu.ptv.client.model.VmOpenApiElectronicChannelInBase;
import fi.metatavu.ptv.client.model.VmOpenApiElectronicChannel;
import fi.metatavu.ptv.client.model.VmOpenApiElectronicChannelIn;
import java.time.LocalDateTime;
import fi.metatavu.ptv.client.model.VmOpenApiGuidPage;
import fi.metatavu.ptv.client.model.VmOpenApiPhoneChannelInBase;
import fi.metatavu.ptv.client.model.VmOpenApiPhoneChannel;
import fi.metatavu.ptv.client.model.VmOpenApiPhoneChannelIn;
import fi.metatavu.ptv.client.model.VmOpenApiPrintableFormChannel;
import fi.metatavu.ptv.client.model.VmOpenApiPrintableFormChannelInBase;
import fi.metatavu.ptv.client.model.VmOpenApiPrintableFormChannelIn;
import fi.metatavu.ptv.client.model.VmOpenApiServiceLocationChannel;
import fi.metatavu.ptv.client.model.VmOpenApiServiceLocationChannelInBase;
import fi.metatavu.ptv.client.model.VmOpenApiServiceLocationChannelIn;
import fi.metatavu.ptv.client.model.VmOpenApiWebPageChannelInBase;
import fi.metatavu.ptv.client.model.VmOpenApiWebPageChannel;
import fi.metatavu.ptv.client.model.VmOpenApiWebPageChannelIn;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-01-25T15:52:10.525+02:00")
public class ServiceChannelApi {

  public ServiceChannelApi(ApiClient client) {
    this.client = client;
  }
  
  /**
   * Fetches all the information related to a single service channel.
   * &lt;para&gt;Notice! The returned object is one of the following: &lt;i&gt;VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type of the channel. For example if the channel is phone channel then VmOpenApiPhoneChannel object is returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;               {                  \&quot;id\&quot;: [                      \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                  ]               }               &lt;/code&gt;
   * @param id Guid (required)
   */
  public ApiResponse<VmOpenApiServiceChannels> apiServiceChannelByIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<VmOpenApiServiceChannels> resultType = new ResultType<VmOpenApiServiceChannels>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates an electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id electronic channel id (required)
   * @param request electronic channel data (optional)
   */
  public ApiResponse<VmOpenApiElectronicChannel> apiServiceChannelEChannelByIdPut(String id, VmOpenApiElectronicChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/EChannel/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<VmOpenApiElectronicChannel> resultType = new ResultType<VmOpenApiElectronicChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The electronic channel data. (optional)
   */
  public ApiResponse<VmOpenApiElectronicChannel> apiServiceChannelEChannelPost(VmOpenApiElectronicChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/EChannel";
      
    ResultType<VmOpenApiElectronicChannel> resultType = new ResultType<VmOpenApiElectronicChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates an electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId electronic channel external source id (required)
   * @param request electronic channel data (optional)
   */
  public ApiResponse<VmOpenApiElectronicChannel> apiServiceChannelEChannelSourceIdBySourceIdPut(String sourceId, VmOpenApiElectronicChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/EChannel/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<VmOpenApiElectronicChannel> resultType = new ResultType<VmOpenApiElectronicChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets all published service channels within PTV as a list of service channel ids.              Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;date\&quot;: [                      \&quot;The value &#39;rfsd&#39; is not valid for Nullable&#x60;1.\&quot;,                      \&quot;The date parameter is invalid.\&quot;                  ]              }              &lt;/code&gt;
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   * @param page The page to be fetched. (optional)
   */
  public ApiResponse<VmOpenApiGuidPage> apiServiceChannelGet(LocalDateTime date, Integer page) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/ServiceChannel";
      
    ResultType<VmOpenApiGuidPage> resultType = new ResultType<VmOpenApiGuidPage>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of published service channels for defined organization.              Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;               {                  \&quot;organizationId\&quot;: [                      \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                  ]               }               &lt;/code&gt;
   * @param organizationId Guid (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<VmOpenApiServiceChannels>> apiServiceChannelOrganizationByOrganizationIdGet(String organizationId, LocalDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/ServiceChannel/organization/{organizationId}"
      .replaceAll("\\{" + "organizationId" + "\\}", organizationId);
      
    ResultType<List<VmOpenApiServiceChannels>> resultType = new ResultType<List<VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of certain type of published service channels for defined organization.              Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;               {                  \&quot;organizationId\&quot;: [                      \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                  ]               }               &lt;/code&gt;
   * @param organizationId Guid (required)
   * @param type Service channel type (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<VmOpenApiServiceChannels>> apiServiceChannelOrganizationByOrganizationIdTypeByTypeGet(String organizationId, String type, LocalDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/ServiceChannel/organization/{organizationId}/type/{type}"
      .replaceAll("\\{" + "organizationId" + "\\}", organizationId)
      .replaceAll("\\{" + "type" + "\\}", type);
      
    ResultType<List<VmOpenApiServiceChannels>> resultType = new ResultType<List<VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id phone channel id (required)
   * @param request phone channel data (optional)
   */
  public ApiResponse<VmOpenApiPhoneChannel> apiServiceChannelPhoneByIdPut(String id, VmOpenApiPhoneChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/Phone/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<VmOpenApiPhoneChannel> resultType = new ResultType<VmOpenApiPhoneChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The phone channel data. (optional)
   */
  public ApiResponse<VmOpenApiPhoneChannel> apiServiceChannelPhonePost(VmOpenApiPhoneChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/Phone";
      
    ResultType<VmOpenApiPhoneChannel> resultType = new ResultType<VmOpenApiPhoneChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId phone channel external id (required)
   * @param request phone channel data (optional)
   */
  public ApiResponse<VmOpenApiPhoneChannel> apiServiceChannelPhoneSourceIdBySourceIdPut(String sourceId, VmOpenApiPhoneChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/Phone/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<VmOpenApiPhoneChannel> resultType = new ResultType<VmOpenApiPhoneChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id printable form channel id (required)
   * @param request printable form channel data (optional)
   */
  public ApiResponse<VmOpenApiPrintableFormChannel> apiServiceChannelPrintableFormByIdPut(String id, VmOpenApiPrintableFormChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/PrintableForm/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<VmOpenApiPrintableFormChannel> resultType = new ResultType<VmOpenApiPrintableFormChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The printable form channel data. (optional)
   */
  public ApiResponse<VmOpenApiPrintableFormChannel> apiServiceChannelPrintableFormPost(VmOpenApiPrintableFormChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/PrintableForm";
      
    ResultType<VmOpenApiPrintableFormChannel> resultType = new ResultType<VmOpenApiPrintableFormChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId printable form channel external source id (required)
   * @param request printable form channel data (optional)
   */
  public ApiResponse<VmOpenApiPrintableFormChannel> apiServiceChannelPrintableFormSourceIdBySourceIdPut(String sourceId, VmOpenApiPrintableFormChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/PrintableForm/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<VmOpenApiPrintableFormChannel> resultType = new ResultType<VmOpenApiPrintableFormChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id service location channel id (required)
   * @param request service location channel data. (optional)
   */
  public ApiResponse<VmOpenApiServiceLocationChannel> apiServiceChannelServiceLocationByIdPut(String id, VmOpenApiServiceLocationChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/ServiceLocation/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<VmOpenApiServiceLocationChannel> resultType = new ResultType<VmOpenApiServiceLocationChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The service location channel data. (optional)
   */
  public ApiResponse<VmOpenApiServiceLocationChannel> apiServiceChannelServiceLocationPost(VmOpenApiServiceLocationChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/ServiceLocation";
      
    ResultType<VmOpenApiServiceLocationChannel> resultType = new ResultType<VmOpenApiServiceLocationChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId service location channel external source id (required)
   * @param request service location channel data (optional)
   */
  public ApiResponse<VmOpenApiServiceLocationChannel> apiServiceChannelServiceLocationSourceIdBySourceIdPut(String sourceId, VmOpenApiServiceLocationChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/ServiceLocation/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<VmOpenApiServiceLocationChannel> resultType = new ResultType<VmOpenApiServiceLocationChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of certain type of published service channels.              Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;               {                  \&quot;type\&quot;: [                      \&quot;The field is invalid. Please use one of these: &#39;EChannel, WebPage, PrintableForm, Phone, ServiceLocation&#39;.\&quot;                  ]               }               &lt;/code&gt;
   * @param type Service channel type (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<VmOpenApiServiceChannels>> apiServiceChannelTypeByTypeGet(String type, LocalDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/ServiceChannel/type/{type}"
      .replaceAll("\\{" + "type" + "\\}", type);
      
    ResultType<List<VmOpenApiServiceChannels>> resultType = new ResultType<List<VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates webpage channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id web page channel id (required)
   * @param request web page channel data (optional)
   */
  public ApiResponse<VmOpenApiWebPageChannel> apiServiceChannelWebPageByIdPut(String id, VmOpenApiWebPageChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/WebPage/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<VmOpenApiWebPageChannel> resultType = new ResultType<VmOpenApiWebPageChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new web page channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The web page channel data. (optional)
   */
  public ApiResponse<VmOpenApiWebPageChannel> apiServiceChannelWebPagePost(VmOpenApiWebPageChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/WebPage";
      
    ResultType<VmOpenApiWebPageChannel> resultType = new ResultType<VmOpenApiWebPageChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates webpage channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId web page channel external source id (required)
   * @param request web page channel data (optional)
   */
  public ApiResponse<VmOpenApiWebPageChannel> apiServiceChannelWebPageSourceIdBySourceIdPut(String sourceId, VmOpenApiWebPageChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceChannel/WebPage/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<VmOpenApiWebPageChannel> resultType = new ResultType<VmOpenApiWebPageChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  
  private ApiClient client;
}
