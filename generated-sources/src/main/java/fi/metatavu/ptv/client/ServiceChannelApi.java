/*
 * PTV Open Api version 8
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.ptv.client;

import fi.metatavu.ptv.client.model.*;

import fi.metatavu.ptv.client.model.IVmError;
import fi.metatavu.ptv.client.model.V3VmOpenApiGuidPage;
import fi.metatavu.ptv.client.model.V8VmOpenApiElectronicChannel;
import fi.metatavu.ptv.client.model.V8VmOpenApiElectronicChannelIn;
import fi.metatavu.ptv.client.model.V8VmOpenApiElectronicChannelInBase;
import fi.metatavu.ptv.client.model.V8VmOpenApiPhoneChannel;
import fi.metatavu.ptv.client.model.V8VmOpenApiPhoneChannelIn;
import fi.metatavu.ptv.client.model.V8VmOpenApiPhoneChannelInBase;
import fi.metatavu.ptv.client.model.V8VmOpenApiPrintableFormChannel;
import fi.metatavu.ptv.client.model.V8VmOpenApiPrintableFormChannelIn;
import fi.metatavu.ptv.client.model.V8VmOpenApiPrintableFormChannelInBase;
import fi.metatavu.ptv.client.model.V8VmOpenApiServiceChannels;
import fi.metatavu.ptv.client.model.V8VmOpenApiServiceLocationChannel;
import fi.metatavu.ptv.client.model.V8VmOpenApiServiceLocationChannelIn;
import fi.metatavu.ptv.client.model.V8VmOpenApiServiceLocationChannelInBase;
import fi.metatavu.ptv.client.model.V8VmOpenApiWebPageChannel;
import fi.metatavu.ptv.client.model.V8VmOpenApiWebPageChannelIn;
import fi.metatavu.ptv.client.model.V8VmOpenApiWebPageChannelInBase;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-06T13:25:17.639+03:00")
public class ServiceChannelApi {
  
  private ApiClient client;
  private String accessToken;

  public ServiceChannelApi(ApiClient client, String accessToken) {
    this.client = client;
    this.accessToken = accessToken;
  }
  
  /**
   * Fetches all the information related to a single service channel. Also service channels with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.
   * &lt;para&gt;Notice! The returned object is one of the following: &lt;i&gt;V8VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V8VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type of the channel. For example if the channel is phone channel then V8VmOpenApiPhoneChannel object is returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;id\&quot;: [                     \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                 ]              }              &lt;/code&gt;
   * @param id Guid (required)
   */
  public ApiResponse<V8VmOpenApiServiceChannels> apiV8ServiceChannelActiveByIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/active/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiServiceChannels> resultType = new ResultType<V8VmOpenApiServiceChannels>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Gets all service channels within PTV as a list of service channel ids and names. Also service channels with draft and modified versions are included.   Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Certain type of service channels can be fetched by setting query string parameter type.  NOTE! This is a restricted endpoint.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;date\&quot;: [                   \&quot;The value &#39;-5&#39; is not valid for Nullable&#x60;1.\&quot;,                   \&quot;The date parameter is invalid.\&quot;                 ]              }              &lt;/code&gt;
   * @param page The page to be fetched. (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param type Service channel type (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV8ServiceChannelActiveGet(Integer page, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime date, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime dateBefore, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (dateBefore != null)
    queryParams.put("dateBefore", dateBefore);
if (type != null)
    queryParams.put("type", type);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/v8/ServiceChannel/active";
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Fetches all the information related to a single service channel.
   * &lt;para&gt;Notice! The returned object is one of the following: &lt;i&gt;V8VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V8VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type of the channel. For example if the channel is phone channel then V8VmOpenApiPhoneChannel object is returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;id\&quot;: [                     \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                 ]              }              &lt;/code&gt;
   * @param id Guid (required)
   */
  public ApiResponse<V8VmOpenApiServiceChannels> apiV8ServiceChannelByIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiServiceChannels> resultType = new ResultType<V8VmOpenApiServiceChannels>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Updates electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id electronic channel id (required)
   * @param request electronic channel data (optional)
   */
  public ApiResponse<V8VmOpenApiElectronicChannel> apiV8ServiceChannelEChannelByIdPut(String id, V8VmOpenApiElectronicChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/EChannel/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiElectronicChannel> resultType = new ResultType<V8VmOpenApiElectronicChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a new electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The electronic channel data. (optional)
   */
  public ApiResponse<V8VmOpenApiElectronicChannel> apiV8ServiceChannelEChannelPost(V8VmOpenApiElectronicChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/EChannel";
      
    ResultType<V8VmOpenApiElectronicChannel> resultType = new ResultType<V8VmOpenApiElectronicChannel>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId electronic channel external source id (required)
   * @param request electronic channel data (optional)
   */
  public ApiResponse<V8VmOpenApiElectronicChannel> apiV8ServiceChannelEChannelSourceIdBySourceIdPut(String sourceId, V8VmOpenApiElectronicChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/EChannel/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V8VmOpenApiElectronicChannel> resultType = new ResultType<V8VmOpenApiElectronicChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Gets all published service channels within PTV as a list of service channel ids and names.  Service channels created/modified after certain date can be fetched by adding date as query string parameter  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as &#39;Archived&#39; and withdrawn items can be fetched by setting status parameter as &#39;Withdrawn&#39;.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;date\&quot;: [                   \&quot;The value &#39;-5&#39; is not valid for Nullable&#x60;1.\&quot;,                   \&quot;The date parameter is invalid.\&quot;                 ]              }              &lt;/code&gt;
   * @param page The page to be fetched. (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC) (optional)
   * @param status Set status to get items either in published, archived or withdrawn state. (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV8ServiceChannelGet(Integer page, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime date, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime dateBefore, String status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (dateBefore != null)
    queryParams.put("dateBefore", dateBefore);
if (page != null)
    queryParams.put("page", page);
if (status != null)
    queryParams.put("status", status);
    
        
    String path = "/api/v8/ServiceChannel";
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Fetches all the information related to requested service channels.
   * &lt;para&gt;Notice! The returned object is one of the following: &lt;i&gt;V8VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V8VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V8VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type of the channel. For example if the channel is phone channel then V8VmOpenApiPhoneChannel object is returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;id\&quot;: [                     \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                 ]              }              &lt;/code&gt;
   * @param guids Comma separated list of guids. Max 100 can be added into list. (optional)
   */
  public ApiResponse<List<V8VmOpenApiServiceChannels>> apiV8ServiceChannelListGet(String guids) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (guids != null)
    queryParams.put("guids", guids);
    
        
    String path = "/api/v8/ServiceChannel/list";
      
    ResultType<List<V8VmOpenApiServiceChannels>> resultType = new ResultType<List<V8VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of service channels related to defined municipality.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;type\&quot;: [                     \&quot;The field is invalid. Please use one of these: &#39;EChannel, WebPage, PrintableForm, Phone, ServiceLocation&#39;.\&quot;                 ]              }              &lt;/code&gt;
   * @param code Municipality code (required)
   * @param page The page to be fetched. (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV8ServiceChannelMunicipalityByCodeGet(String code, Integer page, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime date, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime dateBefore) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (dateBefore != null)
    queryParams.put("dateBefore", dateBefore);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/v8/ServiceChannel/municipality/{code}"
      .replaceAll("\\{" + "code" + "\\}", code);
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;date\&quot;: [                     \&quot;The value &#39;-2&#39; is not valid for Nullable&#x60;1.\&quot;,                     \&quot;The date parameter is invalid.\&quot;                 ]              }              &lt;/code&gt;
   * @param organizationId Guid (required)
   * @param page The page to be fetched. (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV8ServiceChannelOrganizationByOrganizationIdGet(String organizationId, Integer page, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime date, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime dateBefore) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (dateBefore != null)
    queryParams.put("dateBefore", dateBefore);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/v8/ServiceChannel/organization/{organizationId}"
      .replaceAll("\\{" + "organizationId" + "\\}", organizationId);
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of certain type of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;type\&quot;: [                     \&quot;The field is invalid. Please use one of these: &#39;EChannel, WebPage, PrintableForm, Phone, ServiceLocation&#39;.\&quot;                 ]              }              &lt;/code&gt;
   * @param organizationId Guid (required)
   * @param type Service channel type (required)
   * @param page The page to be fetched. (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV8ServiceChannelOrganizationByOrganizationIdTypeByTypeGet(String organizationId, String type, Integer page, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime date, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime dateBefore) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (dateBefore != null)
    queryParams.put("dateBefore", dateBefore);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/v8/ServiceChannel/organization/{organizationId}/type/{type}"
      .replaceAll("\\{" + "organizationId" + "\\}", organizationId)
      .replaceAll("\\{" + "type" + "\\}", type);
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Updates phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id phone channel id (required)
   * @param request phone channel data (optional)
   */
  public ApiResponse<V8VmOpenApiPhoneChannel> apiV8ServiceChannelPhoneByIdPut(String id, V8VmOpenApiPhoneChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/Phone/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiPhoneChannel> resultType = new ResultType<V8VmOpenApiPhoneChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a new phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The phone channel data. (optional)
   */
  public ApiResponse<V8VmOpenApiPhoneChannel> apiV8ServiceChannelPhonePost(V8VmOpenApiPhoneChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/Phone";
      
    ResultType<V8VmOpenApiPhoneChannel> resultType = new ResultType<V8VmOpenApiPhoneChannel>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId phone channel external id (required)
   * @param request phone channel data (optional)
   */
  public ApiResponse<V8VmOpenApiPhoneChannel> apiV8ServiceChannelPhoneSourceIdBySourceIdPut(String sourceId, V8VmOpenApiPhoneChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/Phone/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V8VmOpenApiPhoneChannel> resultType = new ResultType<V8VmOpenApiPhoneChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id printable form channel id (required)
   * @param request printable form channel data (optional)
   */
  public ApiResponse<V8VmOpenApiPrintableFormChannel> apiV8ServiceChannelPrintableFormByIdPut(String id, V8VmOpenApiPrintableFormChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/PrintableForm/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiPrintableFormChannel> resultType = new ResultType<V8VmOpenApiPrintableFormChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a new printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The printable form channel data. (optional)
   */
  public ApiResponse<V8VmOpenApiPrintableFormChannel> apiV8ServiceChannelPrintableFormPost(V8VmOpenApiPrintableFormChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/PrintableForm";
      
    ResultType<V8VmOpenApiPrintableFormChannel> resultType = new ResultType<V8VmOpenApiPrintableFormChannel>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId printable form channel external source id (required)
   * @param request printable form channel data (optional)
   */
  public ApiResponse<V8VmOpenApiPrintableFormChannel> apiV8ServiceChannelPrintableFormSourceIdBySourceIdPut(String sourceId, V8VmOpenApiPrintableFormChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/PrintableForm/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V8VmOpenApiPrintableFormChannel> resultType = new ResultType<V8VmOpenApiPrintableFormChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id service location channel id (required)
   * @param request service location channel data. (optional)
   */
  public ApiResponse<V8VmOpenApiServiceLocationChannel> apiV8ServiceChannelServiceLocationByIdPut(String id, V8VmOpenApiServiceLocationChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/ServiceLocation/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiServiceLocationChannel> resultType = new ResultType<V8VmOpenApiServiceLocationChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The service location channel data. (optional)
   */
  public ApiResponse<V8VmOpenApiServiceLocationChannel> apiV8ServiceChannelServiceLocationPost(V8VmOpenApiServiceLocationChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/ServiceLocation";
      
    ResultType<V8VmOpenApiServiceLocationChannel> resultType = new ResultType<V8VmOpenApiServiceLocationChannel>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId service location channel external source id (required)
   * @param request service location channel data (optional)
   */
  public ApiResponse<V8VmOpenApiServiceLocationChannel> apiV8ServiceChannelServiceLocationSourceIdBySourceIdPut(String sourceId, V8VmOpenApiServiceLocationChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/ServiceLocation/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V8VmOpenApiServiceLocationChannel> resultType = new ResultType<V8VmOpenApiServiceLocationChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Gets a list of certain type of published service channels.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;type\&quot;: [                     \&quot;The field is invalid. Please use one of these: &#39;EChannel, WebPage, PrintableForm, Phone, ServiceLocation&#39;.\&quot;                 ]              }              &lt;/code&gt;
   * @param type Service channel type (required)
   * @param page The page to be fetched. (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   * @param dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV8ServiceChannelTypeByTypeGet(String type, Integer page, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime date, @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.datatype.jsr310.ser.OffsetDateTimeSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.ptv.client.OffsetDateTimeDeserializer.class) java.time.OffsetDateTime dateBefore) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (dateBefore != null)
    queryParams.put("dateBefore", dateBefore);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/v8/ServiceChannel/type/{type}"
      .replaceAll("\\{" + "type" + "\\}", type);
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(this.accessToken, path, resultType, queryParams, formParams);
  }
  /**
   * Updates webpage channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id web page channel id (required)
   * @param request web page channel data (optional)
   */
  public ApiResponse<V8VmOpenApiWebPageChannel> apiV8ServiceChannelWebPageByIdPut(String id, V8VmOpenApiWebPageChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/WebPage/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V8VmOpenApiWebPageChannel> resultType = new ResultType<V8VmOpenApiWebPageChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Creates a new web page channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The web page channel data. (optional)
   */
  public ApiResponse<V8VmOpenApiWebPageChannel> apiV8ServiceChannelWebPagePost(V8VmOpenApiWebPageChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/WebPage";
      
    ResultType<V8VmOpenApiWebPageChannel> resultType = new ResultType<V8VmOpenApiWebPageChannel>() {};
    return client.doPOSTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
  /**
   * Updates webpage channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId web page channel external source id (required)
   * @param request web page channel data (optional)
   */
  public ApiResponse<V8VmOpenApiWebPageChannel> apiV8ServiceChannelWebPageSourceIdBySourceIdPut(String sourceId, V8VmOpenApiWebPageChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v8/ServiceChannel/WebPage/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V8VmOpenApiWebPageChannel> resultType = new ResultType<V8VmOpenApiWebPageChannel>() {};
    return client.doPUTRequest(this.accessToken, path, resultType, queryParams, formParams,request);
  }
}
