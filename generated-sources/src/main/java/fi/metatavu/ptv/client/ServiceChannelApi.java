/**
 * PTV Open Api version 4
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fi.metatavu.ptv.client;

import fi.metatavu.ptv.client.model.*;

import fi.metatavu.ptv.client.model.IVmError;
import fi.metatavu.ptv.client.model.V4VmOpenApiServiceChannels;
import fi.metatavu.ptv.client.model.V4VmOpenApiElectronicChannel;
import fi.metatavu.ptv.client.model.V4VmOpenApiElectronicChannelInBase;
import fi.metatavu.ptv.client.model.V4VmOpenApiElectronicChannelIn;
import java.time.OffsetDateTime;
import fi.metatavu.ptv.client.model.V3VmOpenApiGuidPage;
import fi.metatavu.ptv.client.model.V4VmOpenApiPhoneChannel;
import fi.metatavu.ptv.client.model.V4VmOpenApiPhoneChannelInBase;
import fi.metatavu.ptv.client.model.V4VmOpenApiPhoneChannelIn;
import fi.metatavu.ptv.client.model.V4VmOpenApiPrintableFormChannel;
import fi.metatavu.ptv.client.model.V4VmOpenApiPrintableFormChannelInBase;
import fi.metatavu.ptv.client.model.V4VmOpenApiPrintableFormChannelIn;
import fi.metatavu.ptv.client.model.V4VmOpenApiServiceLocationChannelInBase;
import fi.metatavu.ptv.client.model.V4VmOpenApiServiceLocationChannel;
import fi.metatavu.ptv.client.model.V4VmOpenApiServiceLocationChannelIn;
import fi.metatavu.ptv.client.model.V4VmOpenApiWebPageChannelInBase;
import fi.metatavu.ptv.client.model.V4VmOpenApiWebPageChannel;
import fi.metatavu.ptv.client.model.V4VmOpenApiWebPageChannelIn;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-10T07:12:40.139+03:00")
public class ServiceChannelApi {

  public ServiceChannelApi(ApiClient client) {
    this.client = client;
  }
  
  /**
   * Fetches all the information related to a single service channel.
   * &lt;para&gt;Notice! The returned object is one of the following: &lt;i&gt;V4VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V4VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type of the channel. For example if the channel is phone channel then V4VmOpenApiPhoneChannel object is returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;id\&quot;: [                     \&quot;Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\&quot;                 ]              }              &lt;/code&gt;
   * @param id Guid (required)
   */
  public ApiResponse<V4VmOpenApiServiceChannels> apiV4ServiceChannelByIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V4VmOpenApiServiceChannels> resultType = new ResultType<V4VmOpenApiServiceChannels>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates a new electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id electronic channel id (required)
   * @param request electronic channel data (optional)
   */
  public ApiResponse<V4VmOpenApiElectronicChannel> apiV4ServiceChannelEChannelByIdPut(String id, V4VmOpenApiElectronicChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/EChannel/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V4VmOpenApiElectronicChannel> resultType = new ResultType<V4VmOpenApiElectronicChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The electronic channel data. (optional)
   */
  public ApiResponse<V4VmOpenApiElectronicChannel> apiV4ServiceChannelEChannelPost(V4VmOpenApiElectronicChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/EChannel";
      
    ResultType<V4VmOpenApiElectronicChannel> resultType = new ResultType<V4VmOpenApiElectronicChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates a new electronic channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId electronic channel external source id (required)
   * @param request electronic channel data (optional)
   */
  public ApiResponse<V4VmOpenApiElectronicChannel> apiV4ServiceChannelEChannelSourceIdBySourceIdPut(String sourceId, V4VmOpenApiElectronicChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/EChannel/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V4VmOpenApiElectronicChannel> resultType = new ResultType<V4VmOpenApiElectronicChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets all published service channels within PTV as a list of service channel ids and names.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;date\&quot;: [                   \&quot;The value &#39;-5&#39; is not valid for Nullable&#x60;1.\&quot;,                   \&quot;The date parameter is invalid.\&quot;                 ]              }              &lt;/code&gt;
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   * @param page The page to be fetched. (optional)
   */
  public ApiResponse<V3VmOpenApiGuidPage> apiV4ServiceChannelGet(OffsetDateTime date, Integer page) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/v4/ServiceChannel";
      
    ResultType<V3VmOpenApiGuidPage> resultType = new ResultType<V3VmOpenApiGuidPage>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of published service channels for defined organization.   Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;Notice! The returned objects are these types: &lt;i&gt;V4VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;4VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V4VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;date\&quot;: [                     \&quot;The value &#39;-2&#39; is not valid for Nullable&#x60;1.\&quot;,                     \&quot;The date parameter is invalid.\&quot;                 ]              }              &lt;/code&gt;
   * @param organizationId Guid (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<V4VmOpenApiServiceChannels>> apiV4ServiceChannelOrganizationByOrganizationIdGet(String organizationId, OffsetDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/v4/ServiceChannel/organization/{organizationId}"
      .replaceAll("\\{" + "organizationId" + "\\}", organizationId);
      
    ResultType<List<V4VmOpenApiServiceChannels>> resultType = new ResultType<List<V4VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of certain type of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;Notice! The returned objects are one of the following types: &lt;i&gt;V4VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V4VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type parameter. For example if the request type was &#39;Phone&#39; then V4VmOpenApiPhoneChannel objects are returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;type\&quot;: [                     \&quot;The field is invalid. Please use one of these: &#39;EChannel, WebPage, PrintableForm, Phone, ServiceLocation&#39;.\&quot;                 ]              }              &lt;/code&gt;
   * @param organizationId Guid (required)
   * @param type Service channel type (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<V4VmOpenApiServiceChannels>> apiV4ServiceChannelOrganizationByOrganizationIdTypeByTypeGet(String organizationId, String type, OffsetDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/v4/ServiceChannel/organization/{organizationId}/type/{type}"
      .replaceAll("\\{" + "organizationId" + "\\}", organizationId)
      .replaceAll("\\{" + "type" + "\\}", type);
      
    ResultType<List<V4VmOpenApiServiceChannels>> resultType = new ResultType<List<V4VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id phone channel id (required)
   * @param request phone channel data (optional)
   */
  public ApiResponse<V4VmOpenApiPhoneChannel> apiV4ServiceChannelPhoneByIdPut(String id, V4VmOpenApiPhoneChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/Phone/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V4VmOpenApiPhoneChannel> resultType = new ResultType<V4VmOpenApiPhoneChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The phone channel data. (optional)
   */
  public ApiResponse<V4VmOpenApiPhoneChannel> apiV4ServiceChannelPhonePost(V4VmOpenApiPhoneChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/Phone";
      
    ResultType<V4VmOpenApiPhoneChannel> resultType = new ResultType<V4VmOpenApiPhoneChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates phone channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId phone channel external id (required)
   * @param request phone channel data (optional)
   */
  public ApiResponse<V4VmOpenApiPhoneChannel> apiV4ServiceChannelPhoneSourceIdBySourceIdPut(String sourceId, V4VmOpenApiPhoneChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/Phone/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V4VmOpenApiPhoneChannel> resultType = new ResultType<V4VmOpenApiPhoneChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id printable form channel id (required)
   * @param request printable form channel data (optional)
   */
  public ApiResponse<V4VmOpenApiPrintableFormChannel> apiV4ServiceChannelPrintableFormByIdPut(String id, V4VmOpenApiPrintableFormChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/PrintableForm/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V4VmOpenApiPrintableFormChannel> resultType = new ResultType<V4VmOpenApiPrintableFormChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The printable form channel data. (optional)
   */
  public ApiResponse<V4VmOpenApiPrintableFormChannel> apiV4ServiceChannelPrintableFormPost(V4VmOpenApiPrintableFormChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/PrintableForm";
      
    ResultType<V4VmOpenApiPrintableFormChannel> resultType = new ResultType<V4VmOpenApiPrintableFormChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates printable form channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId printable form channel external source id (required)
   * @param request printable form channel data (optional)
   */
  public ApiResponse<V4VmOpenApiPrintableFormChannel> apiV4ServiceChannelPrintableFormSourceIdBySourceIdPut(String sourceId, V4VmOpenApiPrintableFormChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/PrintableForm/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V4VmOpenApiPrintableFormChannel> resultType = new ResultType<V4VmOpenApiPrintableFormChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id service location channel id (required)
   * @param request service location channel data. (optional)
   */
  public ApiResponse<V4VmOpenApiServiceLocationChannel> apiV4ServiceChannelServiceLocationByIdPut(String id, V4VmOpenApiServiceLocationChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/ServiceLocation/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V4VmOpenApiServiceLocationChannel> resultType = new ResultType<V4VmOpenApiServiceLocationChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The service location channel data. (optional)
   */
  public ApiResponse<V4VmOpenApiServiceLocationChannel> apiV4ServiceChannelServiceLocationPost(V4VmOpenApiServiceLocationChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/ServiceLocation";
      
    ResultType<V4VmOpenApiServiceLocationChannel> resultType = new ResultType<V4VmOpenApiServiceLocationChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates a new service location channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId service location channel external source id (required)
   * @param request service location channel data (optional)
   */
  public ApiResponse<V4VmOpenApiServiceLocationChannel> apiV4ServiceChannelServiceLocationSourceIdBySourceIdPut(String sourceId, V4VmOpenApiServiceLocationChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/ServiceLocation/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V4VmOpenApiServiceLocationChannel> resultType = new ResultType<V4VmOpenApiServiceLocationChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of certain type of published service channels.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.
   * &lt;para&gt;Notice! The returned object is one of the following: &lt;i&gt;V4VmOpenApiElectronicChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiPhoneChannel&lt;/i&gt; or               &lt;i&gt;V4VmOpenApiPrintableFormChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiServiceLocationChannel&lt;/i&gt; or &lt;i&gt;V4VmOpenApiWebPageChannel&lt;/i&gt;&lt;/para&gt;  &lt;para&gt;The returned object depends on the type parameter. For example if the request type was &#39;Phone&#39; then V4VmOpenApiPhoneChannel objects are returned.&lt;/para&gt;  &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                 \&quot;type\&quot;: [                     \&quot;The field is invalid. Please use one of these: &#39;EChannel, WebPage, PrintableForm, Phone, ServiceLocation&#39;.\&quot;                 ]              }              &lt;/code&gt;
   * @param type Service channel type (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<V4VmOpenApiServiceChannels>> apiV4ServiceChannelTypeByTypeGet(String type, OffsetDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/v4/ServiceChannel/type/{type}"
      .replaceAll("\\{" + "type" + "\\}", type);
      
    ResultType<List<V4VmOpenApiServiceChannels>> resultType = new ResultType<List<V4VmOpenApiServiceChannels>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates webpage channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id web page channel id (required)
   * @param request web page channel data (optional)
   */
  public ApiResponse<V4VmOpenApiWebPageChannel> apiV4ServiceChannelWebPageByIdPut(String id, V4VmOpenApiWebPageChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/WebPage/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<V4VmOpenApiWebPageChannel> resultType = new ResultType<V4VmOpenApiWebPageChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new web page channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param request The web page channel data. (optional)
   */
  public ApiResponse<V4VmOpenApiWebPageChannel> apiV4ServiceChannelWebPagePost(V4VmOpenApiWebPageChannelIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/WebPage";
      
    ResultType<V4VmOpenApiWebPageChannel> resultType = new ResultType<V4VmOpenApiWebPageChannel>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates webpage channel with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceChannelNames\&quot;:[                      \&quot;The ServiceChannelNames field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId web page channel external source id (required)
   * @param request web page channel data (optional)
   */
  public ApiResponse<V4VmOpenApiWebPageChannel> apiV4ServiceChannelWebPageSourceIdBySourceIdPut(String sourceId, V4VmOpenApiWebPageChannelInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/v4/ServiceChannel/WebPage/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<V4VmOpenApiWebPageChannel> resultType = new ResultType<V4VmOpenApiWebPageChannel>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  
  private ApiClient client;
}
